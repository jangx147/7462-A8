---
title: "7462-A8"
author: "Subin Jang"
format: html
embed-resources: true
editor: visual
---

```{r}
#| message: false
#| echo: false

# All the packages I need
library(osmdata)
library(tidyr)
library(tidyverse)
library(gt)
library(ggmap)
library(plotly)
library(ggthemes)
library(viridis)
library(leaflet)

#Call the ACS API, returns a sf object
library(tidycensus)
library(ggmap)
library(tigris)
```

```{r}
#| message: false
#| echo: false
#| warning: false

## Load the API key
api_key <- Sys.getenv("MAPS_API_KEY")

options(tigris_use_cache = TRUE)
#options(census_api_key = Sys.getenv("MAPS_API_KEY"))

hp_rent.df <- get_acs(
  geography = "block group",
  variables = "B25064_001E", #Code for median rent cost (in dollars)
  state     = "MN",
  county    = "Hennepin",
  year      = 2020,
  geometry  = TRUE) 

#Get the bounding box and county outline
mn.box           <- osmdata::getbb("minnesota")
hennepin.box     <- osmdata::getbb("hennepin")
hennepin.outline <- osmdata::getbb("hennepin", format_out = "polygon")[[1]] %>%
  as_tibble() %>%
  rename(longitude = V1, latitude = V2)

#Get the base map (foundational layer)
# Here we are using ggmap
HP_base.map <- get_map(
                       location = hennepin.box,
                       source   = "stamen",
                       maptype  = "watercolor",
                       crop = TRUE
                      )

#Create the base map
hennepin_base.gg <- ggmap(HP_base.map) +
  geom_polygon(data = hennepin.outline, aes(x = longitude, y = latitude), colour = "black", size = 1.6, alpha = 0.1) +
  theme_map() +
  theme(
    plot.title   = element_text(size  = 16,
                                hjust = 0.5),
    legend.text  = element_text(size = 16),
    legend.title = element_text(size = 16),
    legend.position = "right"
  )
    
#Display base map
hennepin_base.gg

#Plot normally
rent.gg <- ggplot() + 
  geom_sf(data = hp_rent.df, aes(fill = estimate)) + 
  labs(title = "Hennepin county, MN 2020 ACS Estimated Median Rent Cost") + 
  theme_void() + 
  scale_fill_viridis_c("Median Rent", labels = scales::dollar)

#Display
rent.gg

#Add a text label to hp_rent.df
library(stringr)

hp_rent_plotly.df <- hp_rent.df %>%
  mutate(
    block_group = str_split(NAME, ",") %>%
                 map_chr(1) %>%
                 str_remove("Block Group "),
    tract = str_split(NAME, ",") %>%
                 map_chr(2) %>%
                 str_remove("Census Tract ")) %>%
  mutate(text_label = str_c(
                  "Tract: ",
                  tract,
                  "\nBlock Group: ",
                  block_group,
                  "\nMedian Rent Cost: ",
                  ifelse(is.na(estimate), "NA", scales::dollar(estimate))
                 ))

#Generate the ggplot
rent.gg <- hp_rent_plotly.df %>%
  ggplot() + 
  geom_sf(aes(fill = estimate, text = text_label),
          colour = "black", size = 0.1) + 
  labs(title = "Hennepin County, MN 2020 ACS \nMedian Rent Cost Per Month") + 
  scale_fill_viridis_c("Median Rent Cost", labels = scales::dollar) +
  theme_map() +
  theme(
    plot.title   = element_text(size  = 16,
                                hjust = 0.5),
    legend.text  = element_text(size = 16),
    legend.title = element_text(size = 16),
    legend.position = "right"
  ) 

rent.gg
#Display
ggplotly(rent.gg,
         tooltip = "text",
         height  = 600,
         width   = 800) %>%
  style(hoveron = "fills")


#First, need to make sure the coordinate systems between the ggmap and geom_sf match
library(sf)
coord_ggmap <- st_crs(hennepin_base.gg) 
coord_sf    <- st_crs(hp_rent_plotly.df) 

#Overlay thge sf info from tidycensus ACS income estimates
mn_rent.ggmap <- hennepin_base.gg +  
  geom_sf(data = hp_rent_plotly.df, 
          aes(fill = estimate, text = text_label),
          colour = "black", size = 0.1,
          inherit.aes = FALSE) + 
  labs(title = "Hennepin County, MN 2020 ACS \nMedian Rent Cost Per Month") + 
  scale_fill_viridis_c("Median Rent Cost", labels = scales::dollar) +
  theme_map() +
  theme(
    plot.title   = element_text(size  = 12,
                                hjust = 0.5),
    legend.text  = element_text(size = 12),
    legend.title = element_text(size = 12),
    legend.position = "right"
  )

#Display plotly
ggplotly(mn_rent.ggmap,
         tooltip = "text",
         height  = 600,
         width   = 800) %>%
  style(hoveron = "fills")
  #style(hoverlabel = text)

```
